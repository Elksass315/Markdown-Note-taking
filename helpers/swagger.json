{
  "openapi": "3.0.0",
  "info": {
    "title": "Markdown File Handling and Grammar Checking API",
    "version": "1.0.0",
    "description": "API for uploading, reading, and converting Markdown files to HTML, as well as grammar checking using LanguageTool"
  },
  "paths": {
    "api/auth": {
      "post": {
        "summary": "User login",
        "description": "Authenticate a user by email and password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password (min 3 characters, max 30)",
                    "example": "mypassword123",
                    "pattern": "^[a-zA-Z0-9]{3,30}$"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT token is returned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "JWT token"
                },
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              }
            }
          },
          "400": {
            "description": "Invalid email or password",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "validation_error": {
                    "summary": "Validation error",
                    "value": "Invalid email or password."
                  },
                  "invalid_email": {
                    "summary": "Invalid email",
                    "value": "Invalid email or password."
                  },
                  "invalid_password": {
                    "summary": "Invalid password",
                    "value": "Invalid email or password."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/file-rendering/md": {
      "post": {
        "summary": "Upload Markdown file",
        "description": "Uploads a markdown file and returns HTML content",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "markdown": {
                    "type": "string",
                    "format": "binary",
                    "description": "Markdown file to be uploaded"
                  }
                },
                "required": ["markdown"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rendered HTML from the uploaded markdown file",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "Rendered HTML content"
                },
                "example": "<html><body><h1>Heading</h1><p>This is a paragraph.</p></body></html>"
              }
            }
          },
          "500": {
            "description": "An error occurred while processing the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An error occurred while processing the file."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/file-rendering/{fileid}": {
      "get": {
        "summary": "Retrieve and render a Markdown file by ID",
        "description": "Fetch a markdown file by file ID and return it rendered as HTML",
        "parameters": [
          {
            "name": "fileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345"
            },
            "description": "ID of the markdown file to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Rendered HTML from the markdown file",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "Rendered HTML content"
                },
                "example": "<html><body><h1>Heading</h1><p>This is a paragraph.</p></body></html>"
              }
            }
          },
          "404": {
            "description": "File not found or user does not have access to the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "File not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occurred while processing the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Could not read the file"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/grammar/check-grammar": {
      "post": {
        "summary": "Check grammar in a text",
        "description": "Uses LanguageTool to check grammar in the provided text",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text to check for grammar errors",
                    "example": "This is an example sentence with an eror."
                  },
                  "language": {
                    "type": "string",
                    "description": "Language for the grammar check (default is en-US)",
                    "example": "en-US"
                  }
                },
                "required": ["text"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Grammar check results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "originalText": {
                      "type": "string",
                      "description": "The original text that was checked"
                    },
                    "grammarErrors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "description": "Description of the grammar error"
                          },
                          "shortMessage": {
                            "type": "string",
                            "description": "Short description of the grammar error"
                          },
                          "offset": {
                            "type": "integer",
                            "description": "Position of the error in the text"
                          },
                          "length": {
                            "type": "integer",
                            "description": "Length of the error in the text"
                          }
                        }
                      },
                      "description": "List of grammar errors"
                    }
                  },
                  "example": {
                    "originalText": "This is an example sentence with an eror.",
                    "grammarErrors": [
                      {
                        "message": "Possible spelling mistake found",
                        "shortMessage": "Spelling error",
                        "offset": 33,
                        "length": 5
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Text is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Text is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while checking grammar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error checking grammar"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/markdown/upload": {
      "post": {
        "summary": "Upload a Markdown file",
        "description": "Uploads a Markdown file (md/markdown only) for the authenticated user",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Markdown file to be uploaded"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "description": "Details of the uploaded file"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or no file uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "File must be a markdown file"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/api/markdown/files-list": {
      "get": {
        "summary": "Get list of uploaded files",
        "description": "Fetches the list of markdown files uploaded by the authenticated user",
        "responses": {
          "200": {
            "description": "List of markdown files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "File paths of the uploaded markdown files"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No files found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "No files found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/api/markdown/file/{fileid}": {
      "get": {
        "summary": "Retrieve an uploaded file by ID",
        "description": "Fetches the markdown file with the given ID for the authenticated user",
        "parameters": [
          {
            "name": "fileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345"
            },
            "description": "ID of the file to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "File retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "description": "Path of the file"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "File not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving the file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Could not send the file"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an uploaded file by ID",
        "description": "Deletes the markdown file with the given ID for the authenticated user",
        "parameters": [
          {
            "name": "fileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345"
            },
            "description": "ID of the file to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File deleted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "File not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/todo": {
      "get": {
        "summary": "Get user's to-dos",
        "description": "Fetches all to-dos for the authenticated user",
        "responses": {
          "200": {
            "description": "List of to-do items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": { "type": "string", "description": "To-Do ID" },
                      "title": { "type": "string", "description": "Title of the to-do" },
                      "description": { "type": "string", "description": "Description of the to-do" },
                      "status": { "type": "string", "description": "Status of the to-do" },
                      "priority": { "type": "string", "description": "Priority level of the to-do" },
                      "dueDate": { "type": "string", "format": "date-time", "description": "Due date of the to-do" }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No to-do items found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "No to-do items found" }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new to-do item",
        "description": "Creates a new to-do item for the authenticated user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "description": "Title of the to-do" },
                  "description": { "type": "string", "description": "Description of the to-do" },
                  "status": { "type": "string", "description": "Status of the to-do" },
                  "priority": { "type": "string", "description": "Priority level of the to-do" },
                  "dueDate": { "type": "string", "format": "date-time", "description": "Due date of the to-do" }
                },
                "required": ["title"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "To-do item created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string", "description": "To-Do ID" },
                    "title": { "type": "string", "description": "Title of the to-do" },
                    "description": { "type": "string", "description": "Description of the to-do" },
                    "status": { "type": "string", "description": "Status of the to-do" },
                    "priority": { "type": "string", "description": "Priority level of the to-do" },
                    "dueDate": { "type": "string", "format": "date-time", "description": "Due date of the to-do" }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/todo/{id}": {
      "put": {
        "summary": "Update an existing to-do item",
        "description": "Updates an existing to-do item for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "615c1f2e1c9d4400007a6d78"
            },
            "description": "ID of the to-do to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string", "description": "Title of the to-do" },
                  "description": { "type": "string", "description": "Description of the to-do" },
                  "status": { "type": "string", "description": "Status of the to-do" },
                  "priority": { "type": "string", "description": "Priority level of the to-do" },
                  "dueDate": { "type": "string", "format": "date-time", "description": "Due date of the to-do" }
                },
                "required": ["title"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "To-do item updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string", "description": "To-Do ID" },
                    "title": { "type": "string", "description": "Title of the to-do" },
                    "description": { "type": "string", "description": "Description of the to-do" },
                    "status": { "type": "string", "description": "Status of the to-do" },
                    "priority": { "type": "string", "description": "Priority level of the to-do" },
                    "dueDate": { "type": "string", "format": "date-time", "description": "Due date of the to-do" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "To-do item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "The to-do with the given ID was not found." }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a to-do item",
        "description": "Deletes a to-do item for the authenticated user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "615c1f2e1c9d4400007a6d78"
            },
            "description": "ID of the to-do to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "To-do item deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string", "description": "To-Do ID" },
                    "title": { "type": "string", "description": "Title of the to-do" },
                    "description": { "type": "string", "description": "Description of the to-do" },
                    "status": { "type": "string", "description": "Status of the to-do" },
                    "priority": { "type": "string", "description": "Priority level of the to-do" },
                    "dueDate": { "type": "string", "format": "date-time", "description": "Due date of the to-do" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "To-do item not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "The to-do with the given ID was not found." }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/me": {
      "get": {
        "summary": "Get the current authenticated user",
        "description": "Fetches details of the authenticated user without the password",
        "responses": {
          "200": {
            "description": "Authenticated user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string", "description": "User ID" },
                    "fullName": { "type": "string", "description": "Full name of the user" },
                    "email": { "type": "string", "description": "User's email" },
                    "phoneNumber": { "type": "string", "description": "User's phone number" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Registers a new user with a full name, email, password, and phone number",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullName": { "type": "string", "description": "Full name of the user" },
                  "email": { "type": "string", "description": "Email address of the user" },
                  "password": { "type": "string", "description": "Password for the user account" },
                  "phoneNumber": { "type": "string", "description": "Phone number of the user" }
                },
                "required": ["fullName", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string", "description": "User ID" },
                    "fullName": { "type": "string", "description": "Full name of the user" },
                    "email": { "type": "string", "description": "User's email" },
                    "phoneNumber": { "type": "string", "description": "User's phone number" }
                  }
                }
              }
            },
            "headers": {
              "x-auth-token": {
                "description": "JWT authentication token",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "User already registered or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "User already registered." }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/update-password": {
      "put": {
        "summary": "Update user password",
        "description": "Allows an authenticated user to change their password",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": { "type": "string", "description": "New password" }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Password changed successfully." }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
